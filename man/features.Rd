% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/features.R
\name{features}
\alias{features}
\title{selecting or removing document features through features}
\arguments{
\item{features}{a character vector, list of character vectors, \link{dictionary},
\link{collocations}, or \link{dfm}. See \link{features} for details.}
}
\description{
Feature selection or removal in \pkg{quanteda} using the \code{features} argument.
}
\details{
The \code{features} argument is a vector of patterns, including sequences, 
  to match in a target object, whose match type is specified by \code{\link{valuetype}}.
  Note that an empty feature (\code{""}) will match "padding" in a \link{tokens} object.
  \describe{
  \item{\code{character}}{A character vector of token patterns to be selected or removed. 
    Whitespace is not privileged, so that in a character vector, white space is interpreted 
    literally. If you wish to consider whitespace-separated elements as sequences of tokens,
    wrap the argument in \code{\link{phrase}}.  
    }
  \item{\code{list of character objects}}{If the list elements are character vectors of 
    length 1, then this is equivalent to a vector of characters.  If a list element contains
    a vector of characters longer than length 1, then for matching will consider these
    as sequences of matches, equivalent to wrapping the argument in \code{\link{phrase}}, 
    except for matching to \link{dfm} features where this does not apply.
    }
  \item{\code{dictionary}}{Values in \link{dictionary} are used as features, for literal matches.  
    To consider multi-word dictionary values as sequences, wrap in \code{\link{phrase}}.
    } 
  \item{\code{collocations}}{Collocations objects created from \code{\link{textstat_collocations}} 
    are used as multi-word tokens in functions for \link{tokens}, but not for selection on a 
    \link{dfm}.
    }
  \item{\code{dfm}}{Only \code{\link{dfm_select}} accepts \code{dfm} as features to create a new \code{dfm}
    identical in its features set.
    }
  }
}
\examples{
# these are interpreted literally
(feat1 <- c('president', 'white house', 'house of representatives'))
# as multi-word sequences
phrase(feat1)

# three single-word features
(feat2 <- c('president', 'white_house', 'house_of_representatives'))
phrase(feat2)

# this is equivalent to phrase(feat1)
(feat3 <- list(c('president'), c('white', 'house'), c('house', 'of', 'representatives')))

# glob expression can be used 
phrase(feat4 <- c('president?', 'white house', 'house * representatives'))

# this is equivalent to phrase(feat4)
(feat5 <- list(c('president?'), c('white', 'house'), c('house', '*', 'representatives')))

# dictionary with multi-word matches
(dict1 <- dictionary(us = c('president', 'white house', 'house of representatives')))
phrase(dict1)
}
\keyword{internal}
