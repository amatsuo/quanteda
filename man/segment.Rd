% Generated by roxygen2 (4.0.2): do not edit by hand
\name{segment}
\alias{segment}
\alias{segment.character}
\alias{segment.corpus}
\title{segment texts into component elements}
\usage{
segment(x, ...)

\method{segment}{character}(x, what = c("tokens", "sentences", "paragraphs",
  "other"), delimiter = ifelse(what == "tokens", " ", ifelse(what ==
  "sentences", "[.!?:;]", "\\\\n{2}")), ...)

\method{segment}{corpus}(x, what = c("tokens", "sentences", "paragraphs",
  "other"), delimiter = ifelse(what == "tokens", " ", ifelse(what ==
  "sentences", "[.!?:;]", "\\\\n{2}")), ...)
}
\arguments{
\item{...}{additional arguments to be passed to \link{clean}}

\item{what}{defines the component to define the segmentation unit.  Current
options are tokens, sentences, paragraphs, and other.  Segmenting on
\code{other} allows segmentation of a text on any user-defined value, and
must be accompanied by the \code{delimiter} argument.}

\item{delimiter}{delimiter defined as a \link{regex} for segmentation.
Each type has its own default, except \code{other}, which requires a value to be specified.}
}
\value{
A list of segmented texts, with each element of the list correponding
  to one of the original texts.
}
\description{
Segment text(s) into tokens, sentences, paragraphs, or other sections.
\code{segment} works on a character vector or corpus object, and allows the
delimiters to be defined.  See details.
}
\details{
Tokens are delimited by whitespace.  For sentences, the delimiter
  can be defined by the user.  The default for sentences includes \code{.},
  \code{!}, \code{?}, plus \code{;} and \code{:}.

  For paragraphs, the default is two carriage returns, although this could be
  changed to a single carriage return by changing the value of
 \code{delimiter} to \code{"\\\n{1}"} which is the R version of the
  \link{regex} for one newline character.  (You might
  need this if the document was created in a word processor, for instance,
  and the lines were wrapped in the window rather than being hard-wrapped
  with a newline character.)
}
\examples{
# same as tokenize()
identical(tokenize(uk2010immig, lower=FALSE), segment(uk2010immig, lower=FALSE))

# segment into paragraphs
segment(uk2010immig[3:4], "paragraphs")

# segment a text into sentences
segmentedChar <- segment(uk2010immig, "sentences")
segmentedChar[2]
# segment a corpus into sentences
segmentedCorpus <- segment(corpus(uk2010immig), "sentences")
identical(segmentedCorpus, segmentedChar)
}

