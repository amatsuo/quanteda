% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selectFeatures.R
\name{selectFeaturesParallel.tokenizedTexts}
\alias{selectFeaturesParallel.tokenizedTexts}
\title{Parallel version of selectFeatures}
\usage{
selectFeaturesParallel.tokenizedTexts(x, features, selection = c("keep",
  "remove"), valuetype = c("glob", "regex", "fixed"),
  case_insensitive = TRUE, padding = FALSE, verbose = FALSE, ...)
}
\arguments{
\item{x}{object whose features will be selected}

\item{features}{one of: a character vector of features to be selected, a 
\link{dfm} whose features will be used for selection, or a dictionary class
object whose values (not keys) will provide the features to be selected. 
For \link{dfm} objects, see details in the Value section below.}

\item{selection}{whether to keep or remove the features}

\item{valuetype}{how to interpret feature vector: \code{fixed} for words as 
is; \code{"regex"} for regular expressions; or \code{"glob"} for 
"glob"-style wildcard}

\item{case_insensitive}{ignore the case of dictionary values if \code{TRUE}}

\item{padding}{(only for \code{tokenizedTexts} objects) if \code{TRUE}, leave
an empty string where the removed tokens previously existed.  This is
useful if a positional match is needed between the pre- and post-selected
features, for instance if a window of adjacency needs to be computed.}

\item{verbose}{if \code{TRUE} print message about how many features were 
removed}

\item{...}{supplementary arguments passed to the underlying functions in 
\code{\link[stringi]{stri_detect_regex}}.  (This is how 
\code{case_insensitive} is passed, but you may wish to pass others.)}
}
\description{
Parallel version of selectFeatures
}
\examples{
\dontrun{
data(SOTUCorpus, package = "quantedaData")
toks <- tokenize(SOTUCorpus, removePunct = TRUE)
# head to head, old v. new
system.time(selectFeaturesParallel.tokenizedTexts(toks, stopwords("english"), 
             selection="remove", verbose = FALSE))
microbenchmark::microbenchmark(
    seri = selectFeatures(toks, stopwords("english"), "remove", 
                             verbose = FALSE),
    para = selectFeaturesParallel.tokenizedTexts(toks, stopwords("english"), 
                 selection="remove", verbose = FALSE),
    times = 5, unit = "relative")
}
}

