% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/ngrams.R
\name{ngrams}
\alias{ngrams}
\alias{ngrams.character}
\alias{ngrams.tokenizedTexts}
\alias{skipgrams}
\alias{skipgrams.character}
\alias{skipgrams.tokenizedTexts}
\title{Create ngrams}
\usage{
ngrams(x, ...)

\method{ngrams}{character}(x, n = 2, skip = 0, concatenator = "_", ...)

\method{ngrams}{tokenizedTexts}(x, n = 2, skip = 0, concatenator = "_",
  ...)

skipgrams(x, ...)

\method{skipgrams}{character}(x, n = 2, skip = 1, concatenator = "_", ...)

\method{skipgrams}{tokenizedTexts}(x, n = 2, skip = 1, concatenator = "_",
  ...)
}
\arguments{
\item{x}{a tokenizedText object or a character vector of tokens}

\item{...}{additional arguments passed to \code{\link[parallel]{mclapply}}
which applies \code{ngram.character()} to the \code{tokenizedTexts} list object}

\item{n}{integer vector specifying the number of elements to be concatenated
in each ngram}

\item{skip}{integer vector specifying the adjacency skip size for tokens
forming the ngrams, default is 0 for only immediately neighbouring words.
For \code{skipgrams}, \code{skip} is the distance for which this number or
fewer skips are used to construct the $n$-gram.  Thus a "4-skip-n-gram"
produces results that include 4 skips, 3 skips, 2 skips, 1 skip, and 0
skips (where 0 skips are typical n-grams formed from adjacent words).  See
Guthrie et al (2006).}

\item{concatenator}{character for combining words, default is \code{_}
(underscore) character}
}
\value{
a tokenizedTexts object consisting a list of character vectors of
  ngrams, one list element per text, or a character vector if called on a
  simple character vector
}
\description{
Create a set of ngrams (words in sequence) from tokenized text(s)
}
\details{
Normally, \code{\link{ngrams}} will be called through
  \code{\link{tokenize}}, but these functions are also exported in case a
  user wants to perform lower-level ngram construction on tokenized texts.

  \code{\link{skipgrams}} is a wrapper to \code{\link{ngrams}} that simply
  passes through a \code{window} value of \code{1:(k+1)}, conforming to the
  definition of skip-grams found in Guthrie et al (2006): A $k$ skip-gram is
  an ngram which is a superset of all ngrams and each $(k-i)$ skipgram until
  $(k-i)==0$ (which includes 0 skip-grams).
}
\examples{
ngrams(LETTERS, n = 2, skip = 2)
ngrams(LETTERS, n = 3, skip = 2)
ngrams(LETTERS, n = 3, skip = 3)

tokens <- tokenize("the quick brown fox jumped over the lazy dog.",
                   removePunct = TRUE, simplify = TRUE)
ngrams(tokens, n = 1:3)
ngrams(tokens, n = c(2,4), skip = 1:2, concatenator = " ")

# skipgrams
tokens <- tokenize(toLower("Insurgents killed in ongoing fighting."),
                   removePunct = TRUE, simplify = TRUE)
skipgrams(tokens, n = 2, skip = 1, concatenator = " ")
skipgrams(tokens, n = 2, skip = 2, concatenator = " ")
skipgrams(tokens, n = 3, skip = 2, concatenator = " ")
}
\author{
Ken Benoit
}
\references{
\href{http://homepages.inf.ed.ac.uk/ballison/pdf/lrec_skipgrams.pdf}{Guthrie,
  D., B. Allison, W. Liu, and L. Guthrie. 2006. "A Closer Look at Skip-Gram
  Modelling."}
}

