% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selectFeatures.R
\name{selectFeatures2}
\alias{selectFeatures2}
\alias{selectFeatures2.tokenizedTexts}
\title{working prototype for faster selectFeatures.tokenizedTexts}
\usage{
selectFeatures2(x, ...)

\method{selectFeatures2}{tokenizedTexts}(x, features, selection = c("keep",
  "remove"), valuetype = c("glob", "regex", "fixed"),
  case_insensitive = TRUE, spacer = FALSE, verbose = TRUE, ...)
}
\arguments{
\item{x}{object whose features will be selected}

\item{...}{supplementary arguments passed to the underlying functions in 
\code{\link[stringi]{stri_detect_regex}}.  (This is how 
\code{case_insensitive} is passed, but you may wish to pass others.)}

\item{features}{one of: a character vector of features to be selected, a 
\link{dfm} whose features will be used for selection, or a dictionary class
object whose values (not keys) will provide the features to be selected. 
For \link{dfm} objects, see details in the Value section below.}

\item{selection}{whether to keep or remove the features}

\item{valuetype}{how to interpret feature vector: \code{fixed} for words as 
is; \code{"regex"} for regular expressions; or \code{"glob"} for 
"glob"-style wildcard}

\item{case_insensitive}{ignore the case of dictionary values if \code{TRUE}}

\item{spacer}{if \code{TRUE}, leave an empty string where the removed tokens 
previously existed.  This is useful if a positional match is needed between
the pre- and post-selected features, for instance if a window of adjacency 
needs to be computed.}

\item{verbose}{if \code{TRUE} print message about how many features were 
removed}
}
\description{
Calls C++ for super-fast selection or removal of features from a 
set of tokens.
}
\examples{
# with simple examples
toks <- tokenize(c("This is a sentence.", "This is a second sentence."), 
                 removePunct = TRUE)
toks.copy <- toks
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "fixed", spacer = TRUE, case_insensitive = TRUE)
##### look at the output -- this modified by reference!!
toks 
##### and even modified the copy!
toks.copy

# case_insensitive now working as it should
toks <- tokenize(c("This is a sentence.", "This is a second sentence."), removePunct = TRUE)
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "fixed", spacer = TRUE, case_insensitive = FALSE)
toks <- tokenize(c("This is a sentence.", "This is a second sentence."), removePunct = TRUE)
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "fixed", spacer = TRUE, case_insensitive = TRUE)
toks <- tokenize(c("This is a sentence.", "This is a second sentence."), removePunct = TRUE)
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "glob", spacer = TRUE, case_insensitive = TRUE)
toks <- tokenize(c("This is a sentence.", "This is a second sentence."), removePunct = TRUE)
selectFeatures2(toks, c("is", "a", "this"), selection = "remove", 
                valuetype = "glob", spacer = TRUE, case_insensitive = FALSE)

# with longer texts
txts <- c(exampleString, inaugTexts[2])
toks <- tokenize(txts)
selectFeatures2(toks, stopwords("english"), "remove")
selectFeatures2(toks, stopwords("english"), "keep")
selectFeatures2(toks, stopwords("english"), "remove", spacer = TRUE)
selectFeatures2(toks, stopwords("english"), "keep", spacer = TRUE)
selectFeatures2(tokenize(encodedTexts[1]), stopwords("english"), "remove", spacer = TRUE)
}

