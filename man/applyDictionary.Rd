% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/dictionaries.R
\name{applyDictionary}
\alias{applyDictionary}
\alias{applyDictionary.dfm}
\title{apply a dictionary or thesarus to an object}
\usage{
applyDictionary(x, dictionary, ...)

\method{applyDictionary}{dfm}(x, dictionary, exclusive = TRUE,
  valuetype = c("regex", "glob"), case_insensitive = TRUE,
  capkeys = !exclusive, verbose = TRUE, ...)
}
\arguments{
\item{x}{object to which dictionary or thesaurus will be supplied}

\item{dictionary}{the \link{dictionary}-class object that will be applied to \code{x}}

\item{...}{not used}

\item{exclusive}{if \code{TRUE}, remove all features not in dictionary,
otherwise, replace values in dictionary keys with keys while leaving other
features unaffected}

\item{valuetype}{how to interpret dictionary values: \code{"regex"} for
regular expressions; or \code{"glob"} for "glob"-style wildcard
expressions; \code{"fixed"} for exact matching (entire words, for instance)}

\item{case_insensitive}{ignore the case of dictionary values if \code{TRUE}}

\item{capkeys}{if \code{TRUE}, convert dictionary or thesaurus keys to
uppercase to distinguish them from other features}

\item{verbose}{print status messages if \code{TRUE}}
}
\value{
an object of the type passed with the value-matching features replaced by dictionary keys
}
\description{
Convert features into equivalence classes defined by values of a dictionary
object.
}
\note{
Selecting only features defined in a "dictionary" is traditionally
known in text analysis as a dictionary method, even though technically this is more like a thesarus.
If a more truly thesaurus-like application is desired, set \code{keeponly = FALSE} to convert features
defined as values in a dictionary into their keys, while keeping all other features.
}
\examples{
myDict <- dictionary(list(christmas = c("Christmas", "Santa", "holiday"),
                          opposition = c("Opposition", "reject", "notincorpus"),
                          taxing = "taxing",
                          taxation = "taxation",
                          taxregex = "tax*",
                          country = "united_states"))
myDfm <- dfm(c("My Christmas was ruined by your opposition tax plan.",
               "Does the United_States or Sweden have more progressive taxation?"),
             verbose = FALSE)
applyDictionary(myDfm, myDict, valuetype = "glob")
applyDictionary(myDfm, myDict, exclusive = FALSE, valuetype = "glob", verbose = FALSE)
}

